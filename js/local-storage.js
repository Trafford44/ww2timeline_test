// local-storage.js

/**
 * Safely saves a key/value pair to the browser's localStorage.
 * @param {string} key - The unique storage key.
 * @param {any} value - The value to store.
 */
export function saveToLocal(key, value) {
Â  try {
Â  Â  localStorage.setItem(key, JSON.stringify(value));
Â  } catch (e) {
Â  Â  console.error("Failed to save to localStorage:", e);
Â  }
}

/**
 * Safely retrieves and parses a value from the browser's localStorage.
 * @param {string} key - The unique storage key.
 * @returns {any | null} The parsed value, or null if not found or an error occurs.
 */
export function loadFromLocal(key) {
Â  try {
Â  Â  const value = localStorage.getItem(key);
Â  Â  return value ? JSON.parse(value) : null;
Â  } catch (e) {
Â  Â  console.error("Failed to load from localStorage:", e);
Â  Â  return null;
Â  }
}

/**
 * Synchronizes the application state (filters, sort) with browser localStorage,
 * ensuring unique keys for each domain to prevent conflicts.
 * * @param {Array<object>} records - The full dataset.
 * @param {object} domain - The current domain configuration.
 */
export function syncLocalState(records, domain) {
Â  console.log("ðŸ’¾ syncLocalState() called");

Â  // Create a unique prefix based on the domain subject.
Â  const domainPrefix = (domain?.subject || 'default_domain').toLowerCase().replace(/\s/g, '_');
Â  
Â  // Define unique, domain-specific keys for state storage
Â  const filterKey = `${domainPrefix}_timelineFilters`;
Â  const sortKey = `${domainPrefix}_timelineSort`;


Â  // Load and apply filters
Â  const filters = loadFromLocal(filterKey);
Â  if (filters) {
Â  Â  console.log(`Loaded filters from localStorage (${filterKey}):`, filters);
Â  Â  import('./filters.js').then(({ applyFilters }) => {
Â  Â  Â  // NOTE: Assuming applyFilters can handle applying a saved filters object.
Â  Â  Â  applyFilters(records, filters); 
Â  Â  });
Â  }

Â  // Load and apply sort order
Â  const sortOrder = loadFromLocal(sortKey);
Â  if (sortOrder) {
Â  Â  console.log(`Loaded sort order from localStorage (${sortKey}):`, sortOrder);
Â  Â  import('./sort.js').then(({ applySort }) => {
Â  Â  Â  applySort(records, sortOrder); // âœ… apply sort to data
Â  Â  });Â  Â  Â Â 
Â  }
}
