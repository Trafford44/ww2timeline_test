// sort.js
/**
 * Sorts an array of events based on a specified field key from the domain configuration.
 * @param {Array<object>} events - The list of event records to sort.
 * @param {string} sortOrder - The key to sort by ("title" or "year").
 * @param {object} domain - The configuration object containing fieldMap.
 * @returns {Array<object>} A new, sorted array of events.
 */
export function applySort(events, sortOrder, domain) {
Â  console.log("ðŸ”€ applySort() called with:", sortOrder);

Â  if (!Array.isArray(events) || !domain?.fieldMap) return events;

Â  const fm = domain.fieldMap;
Â  const titleKey = fm.title || 'Title';
Â  const yearKey = fm.year || 'Year'; // Falls back to 'Year' if not mapped

Â  // Helper function to safely extract the primary year from complex strings (e.g., "1918â€“1920")
Â  const getNumericYear = (year) => {
Â  Â  const rawYear = String(year || "").trim();
Â  Â  // Extract the first part of a year range if present
Â  Â  const firstYear = rawYear.split(/[â€“-]/)[0];
Â  Â  return parseInt(firstYear) || 0; // Default to 0 if parsing fails
Â  };

Â  switch (sortOrder) {
Â  Â  case "title":
Â  Â  Â  return [...events].sort((a, b) => (String(a[titleKey]) || '').localeCompare(String(b[titleKey]) || ''));
Â  Â  case "year":
Â  Â  Â  return [...events].sort((a, b) => {
Â  Â  Â  Â  const yearA = getNumericYear(a[yearKey]);
Â  Â  Â  Â  const yearB = getNumericYear(b[yearKey]);
Â  Â  Â  Â  return yearA - yearB;
Â  Â  Â  });
Â  Â  default:
Â  Â  Â  return events;
Â  }
}
